-- création de la table pour les clients de l'europe du nord
create table clientsEN as 
select *
from ryori.clients
where pays in('Suede','Norvege','Danemark','Finlande','Belgique','Irlande','Pologne','Royaume-Uni','Allemagne')
;

-- création de la table pour les clients d'un nouveau site
create table clientsOI as 
select *
from ryori.clients
where pays='babla'
;

-- création table des commandes pour les clients de l'europe du nord
create table commandesEN as
select r.*
from clientsEN c, ryori.commandes r
where c.code_client=r.code_client
;

-- création table des commandes pour les clients d'un nouveau site
create table commandesOI as
select r.*
from clientsOI c, ryori.commandes r
where c.code_client=r.code_client'
;

-- création table de détails des commande pour les clients de l'europe du nord
create table details_commandesEN as
select r.*
from commandesEN c, ryori.details_commandes r
where c.no_commande=r.no_commande 
;

-- création table de détails des commande pour les clients d'un nouveau site
create table details_commandesOI as
select r.*
from commandesOI c, ryori.details_commandes r
where c.no_commande=r.no_commande 
;

--création table de stock des sites de l'europe du nord
create table stockEN as
select distinct r.*
from clientsEN c, ryori.stock r
where c.pays=r.pays
;

--création table de stock des nouveaux sites
create table stockOI as
select distinct r.*
from clientsOI c, ryori.stock r
where c.pays=r.pays
;

-- table fournisseurs
create table fournisseurs as
select *
from ryori.fournisseurs
;

-- donne les droits de lecture aux autres membres du groupe
GRANT select on stockEN to lpoisse;
GRANT select on stockEN to zvergne;
GRANT select on stockEN to hcburca;
GRANT select on stockEN to jcharlesni;
GRANT select on stockEN to hhamelin;

GRANT select on stockOI to lpoisse;
GRANT select on stockOI to zvergne;
GRANT select on stockOI to hcburca;
GRANT select on stockOI to jcharlesni;
GRANT select on stockOI to hhamelin;

GRANT select on fournisseurs to lpoisse;
GRANT select on fournisseurs to zvergne;
GRANT select on fournisseurs to hcburca;
GRANT select on fournisseurs to jcharlesni;
GRANT select on fournisseurs to hhamelin;

GRANT SELECT ON COMMANDESEN TO lpoisse;
GRANT SELECT ON COMMANDESEN TO zvergne;
GRANT SELECT ON COMMANDESEN TO hcburca;
GRANT SELECT ON COMMANDESEN TO jcharlesni;
GRANT SELECT ON COMMANDESEN TO hhamelin;

GRANT SELECT ON commandesoi TO lpoisse;
GRANT SELECT ON commandesoi TO zvergne;
GRANT SELECT ON commandesoi TO hcburca;
GRANT SELECT ON commandesoi TO jcharlesni;
GRANT SELECT ON commandesoi TO hhamelin;

GRANT SELECT ON details_commandesoi TO lpoisse;
GRANT SELECT ON details_commandesoi TO zvergne;
GRANT SELECT ON details_commandesoi TO hcburca;
GRANT SELECT ON details_commandesoi TO jcharlesni;
GRANT SELECT ON details_commandesoi TO hhamelin;

GRANT SELECT ON details_commandesEn TO lpoisse;
GRANT SELECT ON details_commandesEn TO zvergne;
GRANT SELECT ON details_commandesEn TO hcburca;
GRANT SELECT ON details_commandesEn TO jcharlesni;
GRANT SELECT ON details_commandesEn TO hhamelin;

GRANT SELECT ON clientsen TO lpoisse;
GRANT SELECT ON clientsen TO zvergne;
GRANT SELECT ON clientsen TO hcburca;
GRANT SELECT ON clientsen TO jcharlesni;
GRANT SELECT ON clientsen TO hhamelin;

GRANT SELECT ON clientsoi TO lpoisse;
GRANT SELECT ON clientsoi TO zvergne;
GRANT SELECT ON clientsoi TO hcburca;
GRANT SELECT ON clientsoi TO jcharlesni;
GRANT SELECT ON clientsoi TO hhamelin;
 
-- contraintes de clé primaire
ALTER TABLE ClientsEN 
  ADD CONSTRAINT ClientsENPk PRIMARY KEY (code_client);
  
ALTER TABLE ClientsOI 
  ADD CONSTRAINT ClientsOIPk PRIMARY KEY (code_client);
  
ALTER TABLE commandesEN 
  ADD CONSTRAINT CommandesENPk PRIMARY KEY (no_commande);
  
ALTER TABLE commandesOI 
  ADD CONSTRAINT CommandesOIPk PRIMARY KEY (no_commande);

ALTER TABLE details_commandesEN 
  ADD CONSTRAINT Details_commandesENPk PRIMARY KEY (no_commande, ref_produit);

ALTER TABLE details_commandesOI 
  ADD CONSTRAINT Details_commandesOIPk PRIMARY KEY (no_commande, ref_produit);
  
ALTER TABLE fournisseurs 
  ADD CONSTRAINT FournisseursPk PRIMARY KEY (no_fournisseur);
  
ALTER TABLE stockEN 
  ADD CONSTRAINT StockENPk PRIMARY KEY (ref_produit, pays);
  
ALTER TABLE stockOI 
  ADD CONSTRAINT StockOIPk PRIMARY KEY (ref_produit, pays);
 
 
--contraintes de clé étrangère

ALTER TABLE commandesEN
  ADD CONSTRAINT Fk_ClientsEN FOREIGN KEY (code_client) REFERENCES clientsEN (code_client);

ALTER TABLE commandesOI
  ADD CONSTRAINT Fk_ClientsOI FOREIGN KEY (CODE_CLIENT) REFERENCES CLIENTSOI (CODE_CLIENT);


ALTER TABLE DETAILS_COMMANDESEN
  ADD CONSTRAINT Fk_CommandesEN FOREIGN KEY (NO_COMMANDE) REFERENCES COMMANDESEN (NO_COMMANDE);

ALTER TABLE DETAILS_COMMANDESOI
  ADD CONSTRAINT Fk_CommandesOI FOREIGN KEY (NO_COMMANDE) REFERENCES COMMANDESOI (NO_COMMANDE);


--création de lien vers les autres bds 
  create database link LinkToDBES
connect to hhamelin
identified by mdporacle
using 'DB3'
;

create database link LinkToDBUS
connect to hhamelin
identified by mdporacle
using 'DB4'
;

-----------------------------------
-- trigger pour vérifier la présence de l'employé à l'insertion ou maj dans CommandesEN
CREATE OR REPLACE TRIGGER trg_check_employesEN
  BEFORE INSERT OR UPDATE ON COMMANDESEN
  FOR EACH ROW
  declare
  Employee number(6);
BEGIN
  select e.no_employe
  into employee
  from hcburca.Employes@LinkToDBUS e
  where e.no_employe=:new.no_employe;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid no_employe : There is no Employe with this no_employe in the company !');

END
;

-- trigger pour vérifier la présence de l'employé à l'insertion ou maj dans CommandesOI
CREATE OR REPLACE TRIGGER trg_check_employesOI
  BEFORE INSERT OR UPDATE ON COMMANDESOI
  FOR EACH ROW
  declare
  Employee number(6);
BEGIN
  select e.no_employe
  into employee
  from hcburca.Employes@LinkToDBUS e
  where e.no_employe=:new.no_employe;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid no_employe : There is no Employe with this no_employe in the company !');

END
;

--  trigger pour vérifier la présence du produit à insérer dans DETAILS_COMMANDESEN
CREATE OR REPLACE TRIGGER trg_check_CEN_produits
  BEFORE INSERT OR UPDATE ON DETAILS_COMMANDESEN
  FOR EACH ROW
  declare
  produit number(6);
BEGIN
  select p.ref_produit
  into produit
  from lpoisse.produits@LinkToDBES p
  where p.ref_produit=:new.REF_PRODUIT;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid ref_produit : There is no ref_produit with this ref_produit in the company !');
END
;

--  trigger pour vérifier la présence du produit à insérer dans DETAILS_COMMANDESOI
CREATE OR REPLACE TRIGGER trg_check_COI_produits
  BEFORE INSERT OR UPDATE ON DETAILS_COMMANDESOI
  FOR EACH ROW
  declare
  produit number(6);
BEGIN
  select p.ref_produit
  into produit
  from lpoisse.produits@LinkToDBES p
  where p.ref_produit=:new.REF_PRODUIT;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid ref_produit : There is no ref_produit with this ref_produit in the company !');
END
;

--  trigger pour vérifier si le produit inséré est bien référencé dans stockEN
CREATE OR REPLACE TRIGGER trg_check_stockEN_produits
  BEFORE INSERT OR UPDATE ON STOCKEN
  FOR EACH ROW
  declare
  produit number(6);
BEGIN
  select p.ref_produit
  into produit
  from lpoisse.produits@LinkToDBES p
  where p.ref_produit=:new.REF_PRODUIT;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid ref_produit : There is no ref_produit with this ref_produit in the company !');
END
;

--  trigger pour vérifier si le produit inséré est bien référencé dans STOCKOI
CREATE OR REPLACE TRIGGER trg_check_stockoi_produits
  BEFORE INSERT OR UPDATE ON STOCKOI
  FOR EACH ROW
  declare
  produit number(6);
BEGIN
  select p.ref_produit
  into produit
  from lpoisse.produits@LinkToDBES p
  where p.ref_produit=:new.REF_PRODUIT;

  EXCEPTION
      When NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR( -20001,
          'Invalid ref_produit : There is no ref_produit with this ref_produit in the company !');
END
;

-- vérifier si le fournisseurs à supprimer n'est déjà référencé dans la table produits
CREATE OR REPLACE TRIGGER chk_Fournisseurs BEFORE DELETE ON FOURNISSEURS
FOR EACH ROW
DECLARE
number_of_rows NUMBER; -- nombre de tuples trouvés dans table produit pour le fournisseurs qui doit être supprimé

BEGIN

    SELECT count(*) into number_of_rows
    from lpoisse.produits@LinkToDBES
    where NO_FOURNISSEUR = :old.NO_FOURNISSEUR;

    IF number_of_rows <> 0 THEN
      raise_application_error(-20002, 'Erreur : le fournisseur à supprimer est déjà référencé dans la table produits en europe du sud');
    end if;

END;



-- Vue "Stock"
CREATE OR REPLACE VIEW Stock
AS
(SELECT * FROM STOCKEN
UNION
SELECT * FROM STOCKOI
UNION
SELECT * FROM lpoisse.stockes@LinkToDBES
UNION
SELECT * FROM hcburca.stock_am@LinkToDBUS
);

SELECT * FROM Stock;

--Vue 'Clients'
CREATE OR REPLACE VIEW Clients
AS
(SELECT * FROM CLIENTSEN
UNION
SELECT * FROM CLIENTSOI
UNION
SELECT * FROM lpoisse.ClientsES@LinkToDBES
UNION
SELECT * FROM hcburca.Clients_AM@LinkToDBUS
);

--Vue 'Commandes'
CREATE OR REPLACE VIEW Commandes
AS
(SELECT * FROM COMMANDESOI
UNION
SELECT * FROM COMMANDESEN
UNION
SELECT * FROM lpoisse.Commandeses@LinkToDBES
UNION
SELECT * FROM hcburca.Commandes_AM@LinkToDBUS
);


-- Vue 'Details_Commande'
CREATE OR REPLACE VIEW details_commandes
AS
(SELECT * FROM DETAILS_COMMANDESOIa
UNION
SELECT * FROM DETAILS_COMMANDESEN
UNION
SELECT * FROM lpoisse.details_commandeses@LinkToDBES
UNION
SELECT * FROM hcburca.Details_Commandes_AM@LinkToDBUS
);



/*
	Trigger appelé lors d'une action LMD sur la vue 'Stock'
*/
CREATE OR REPLACE TRIGGER modify_Stocks
INSTEAD OF UPDATE OR INSERT OR DELETE ON Stock
FOR EACH ROW
  BEGIN

    IF INSERTING
    THEN --Insertion à contrôler
      IF (:NEW.pays IN
          ('Suede', 'Norvege', 'Danemark', 'Finlande', 'Belgique', 'Irlande', 'Pologne', 'Royaume-Uni', 'Allemagne', 'Islande', 'Luxembourg', 'Pays-Bas'))
      THEN
        INSERT INTO STOCKEN
        VALUES (:new.ref_produit, :new.pays, :new.unites_stock, :new.unites_commandees, :new.indisponible);
      ELSIF (:NEW.pay IN (/*liste de tous les pays*/))
        THEN
          RAISE_APPLICATION_ERROR(-20008, 'Erreur : le pays spécifié est dans une autre zone');
      ELSE
        DBMS_OUTPUT.PUT_LINE('StockOI: nouveau pays = ' || :NEW.pays);
        INSERT INTO STOCKOI
        VALUES (:new.ref_produit, :new.pays, :new.unites_stock, :new.unites_commandees, :new.indisponible);
      END IF;
    END IF;

    IF UPDATING
    THEN -- Modification à contrôler : on ne peut pas modifier les données d'un stock non local !
      IF (:NEW.pays IN
          ('Suede', 'Norvege', 'Danemark', 'Finlande', 'Belgique', 'Irlande', 'Pologne', 'Royaume-Uni', 'Allemagne', 'Islande', 'Luxembourg', 'Pays-Bas'))
      THEN

        UPDATE stockes
        SET
          ref_produit       = :new.ref_produit,
          PAYS              = :NEW.PAYS,
          UNITES_STOCK      = :new.UNITES_STOCK,
          UNITES_COMMANDEES = :new.UNITES_COMMANDEES,
          INDISPONIBLE      = :new.INDISPONIBLE
        WHERE ref_produit = :old.ref_produit AND pays = :old.PAYS;
      ELSEIF (:NEW.pay IN (/*liste de tous les pays*/))
        THEN
          RAISE_APPLICATION_ERROR(-20008, 'Erreur : le pays spécifié est dans une autre zone');
      ELSE
        UPDATE STOCKOI
        SET
          ref_produit       = :new.ref_produit,
          PAYS              = :NEW.PAYS,
          UNITES_STOCK      = :new.UNITES_STOCK,
          UNITES_COMMANDEES = :new.UNITES_COMMANDEES,
          INDISPONIBLE      = :new.INDISPONIBLE
        WHERE ref_produit = :old.ref_produit AND pays = :old.PAYS;
      END IF;

    END IF;

    IF DELETING
    THEN --Suppression à vérifier ; on ne peut pas supprimer un stock ne faisant pas partie de la région du site (gestion du stock LOCAL seulement)
      IF (:old.pays IN
          ('Suede', 'Norvege', 'Danemark', 'Finlande', 'Belgique', 'Irlande', 'Pologne', 'Royaume-Uni', 'Allemagne', 'Islande', 'Luxembourg', 'Pays-Bas'))
      THEN
        DELETE FROM STOCKEN
        WHERE ref_produit = :old.ref_produit AND pays = :old.pays;
       ELSEIF (:NEW.pay IN (/*liste de tous les pays*/))
        THEN
          RAISE_APPLICATION_ERROR(-20008, 'Erreur : le pays spécifié est dans une autre zone');
      ELSE
          DELETE FROM STOCKOI
          WHERE ref_produit = :old.ref_produit AND pays = :old.pays;
      END IF;
    END IF;
  END;